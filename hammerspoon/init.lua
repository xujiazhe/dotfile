-- DO NOT EDIT THIS FILE DIRECTLY
-- This is a file generated from a literate programing source file located at
-- https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org.
-- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

--  good example  TODO   https://github.com/irliao/dotfiles/blob/master/hammerspoon/init.lua

--local ZBS = "/Applications/ZeroBraneStudio.app/Contents/ZeroBraneStudio"
-- package.path = package.path .. ";" .. ZBS .. "/lualibs/?/?.lua;" .. ZBS .. "/lualibs/?.lua"
-- package.cpath = package.cpath .. ";" .. ZBS .. "/bin/?.dylib;" .. ZBS .. "/bin/clibs53/?.dylib"

function string.ends(String,End) return End=='' or string.sub(String,-string.len(End))==End end

require("_config") --TODO
require('app_name_map')
require("app_window_switch")
require('windows_ops')

require('inVM')
require('pointer_within_window')
--require('app_spec_fn_ctrl')

require('console')
--require('cmsj.init')
--require('keyboard.quoteMenus')
io = require 'io'

--hs.logger.defaultLogLevel = "info"
hs.window.filter.setLogLevel = 'debug'

hyper = { "cmd", "alt", "ctrl" }
shift_hyper = { "cmd", "alt", "ctrl", "shift" }

col = hs.drawing.color.x11
swisscom_logo = hs.image.imageFromPath(hs.configdir .. "/files/swisscom_logo_2x.png")

hs.loadSpoon("SpoonInstall")

spoon.SpoonInstall.repos.zzspoons = {
    url = "https://github.com/zzamboni/zzSpoons",
    desc = "zzamboni's spoon repository",
}
ASSIST_PORT=8520
spoon.SpoonInstall.use_syncinstall = true


Install = spoon.SpoonInstall

Install:andUse("ClipboardTool",
        {
            hotkeys = {
                toggle_clipboard = { hyper, "v" } },
            start   = true,
        }
)


local wm = hs.webview.windowMasks

Install:andUse("MultiTranslate",
        {
            disable = false,
            config = {
                popup_style = wm.utility | wm.HUD | wm.titled | wm.closable | wm.resizable,
            },
            hotkeys = {
				translate_to_zh = { hyper, "g" },
                sogou_text = { hyper, "s" },
				baidu = { hyper, "d" },
                youdao = { hyper, "f" },
				sogou_ocr = { hyper, "r" },

				ggtoggle = {shift_hyper, "g"},
				bdtoggle = {shift_hyper, "d"},
                ydtoggle = {shift_hyper, "f"},
                chuan = { hyper, "x" },
                --translate_to_de = { hyper, "d" },
                --translate_to_es = { hyper, "s" },
                --translate_de_en = { shift_hyper, "e" },
                --translate_en_de = { shift_hyper, "d" },
            }
        }
)

-- spoon.MultiTranslate.result_show_style.textSize = 32   TODO


-- Speech Syntheziser  todo 中英分开后分别朗读
local en_speech = hs.speech.new("samantha.premium"):rate(220)
-- local en_speech = hs.speech.new("tom.premium"):rate(220)
zn_speech = hs.speech.new("mei-jia.premium"):rate(240)
zn_speech:setCallback(function(b, s, r)
    if s == 'didFinish' and r and file_mode then
        command = '/usr/local/bin/ffmpeg -i ' .. tname .. '  -ab 320000 -ar 22050 ' .. audio_path .. no .. '.mp3'
        output, status, t, rc = hs.execute(command)
        alert(no .. ".mp3 ->  " .. rc)
        hs.execute( 'open ' .. tname)
        no = no + 1
    end
end)
local utf_8 = utf8.codes("utf8")
file_mode = false
audio_path = '~/Desktop/共产党/素材/audio/'
output, status, t, rc = hs.execute('cd ' .. audio_path .. '; ls -r1v  *.mp3 | head -1 | cut  -d . -f 1')
if string.len(output) > 0 then     no = tonumber(output)+1
else    no = 1 end
hs.hotkey.bind(shift_hyper, "e", function()
    file_mode = not file_mode
end)
hs.hotkey.bind(hyper, "e", function ()
    if zn_speech:speaking() then zn_speech:stop("sentence") end
    if en_speech:speaking() then en_speech:stop("sentence") end

    if not hs.speech.isAnyApplicationSpeaking() then
        local text = current_selection()
        if utf_8(text, 1)  == 4 or utf8.len(text) <string.len(text)/2 then
            if file_mode then
                tname = audio_path .. no .. '.aiff'
                b=zn_speech:speakToFile(text, tname)
            else
                zn_speech:speak(text)    
            end
        else
            en_speech:speak(text)
        end
    end
end)

--dofile("./anytranslate/anytranslate.lua")

--Install:andUse("TimeLine", { colors = { ["U.S."] = {col.green, col.white, col.red}, ["搜狗拼音"] = {col.black, col.red, col.yellow}, }, start = true })

local localstuff = loadfile(hs.configdir .. "/init-local.lua")
if localstuff then localstuff() end

Install:andUse("FadeLogo",
        {
            config = {
                default_run = 1.0,
            },
            start = true
        }
)

-- Ensure the IPC command line client is available
hs.ipc.cliInstall()

--screensChangedCallback()

--hs.tabs.enableForApp(hs.application'chrome')
--hs.tabs.enableForApp(hs.application'idea')

--TODO 原编号
hs.hints.showTitleThresh = 30
hs.hints.titleMaxSize = 10
hs.hints.style = "vimperator" -- TODO 中文没有
hs.hotkey.bind(hyper, 'w', function()
    hs.hints.windowHints()
end)


--require("appMenu")
--require("weather")

--===    时间表模式   ===
function timeReminder()
    -- keyUpDown({ 'alt', 'shift' }, 'C')
    -- keyUpDown({ 'alt' }, 'C')
    keyUpDown({ 'fn' }, '3')
    keyUpDown({ 'fn' }, '2')
    hs.alert("不跑偏 抓重点¡!")
    hs.timer.doAfter(1 * 30 * 60, timeReminder)
end
hs.timer.doAfter(1 * 30 * 60, timeReminder)

--hs.eventtap.keyStroke({"fn"}, "z")  -- 默认启动时间轴模式

--Install:andUse("TimeFlow")
--dofile("./menu_nav_key.lua")

--require('obs_key')

return hs

--'/Library/Application Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli' --select-profile '我的键盘'



-- 为了跟着鼠标焦点显示 需要在扩展  /Applications/Hammerspoon.app/Contents/Resources/extensions/hs/alert/init.lua
-- 开头添加   local mouse   = require("hs.mouse")
-- showAlert 函数中 thisAlertStyle.atScreenEdge == 2 添加如下分支
-- elseif thisAlertStyle.atScreenEdge == 3 then
--    local pos = mouse.getAbsolutePosition()
--    print("pos = ", pos.x, pos.y)
--    drawingFrame.x = pos.x
--    drawingFrame.y = pos.y
--    if drawingFrame.x + drawingFrame.w > screenFrame.x+screenFrame.w then
--        drawingFrame.x = screenFrame.x+screenFrame.w - drawingFrame.w
--    end
--    if drawingFrame.y + drawingFrame.h > screenFrame.y+screenFrame.h then
--        drawingFrame.y = screenFrame.y+screenFrame.h - drawingFrame.h
--    end
