-- DO NOT EDIT THIS FILE DIRECTLY
-- This is a file generated from a literate programing source file located at
-- https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org.
-- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

--  good example  TODO   https://github.com/irliao/dotfiles/blob/master/hammerspoon/init.lua

--local ZBS = "/Applications/ZeroBraneStudio.app/Contents/ZeroBraneStudio"
-- package.path = package.path .. ";" .. ZBS .. "/lualibs/?/?.lua;" .. ZBS .. "/lualibs/?.lua"
-- package.cpath = package.cpath .. ";" .. ZBS .. "/bin/?.dylib;" .. ZBS .. "/bin/clibs53/?.dylib"

function string.ends(String,End) return End=='' or string.sub(String,-string.len(End))==End end

-- require("config")
require('app_name_map')
require("app_window_switch")
require('windows_ops')

require('inVM')
require('pointer_within_window')
--require('app_spec_fn_ctrl')

require('console')
--require('cmsj.init')
--require('keyboard.quoteMenus')
io = require 'io'

--hs.logger.defaultLogLevel = "info"
hs.window.filter.setLogLevel = 'debug'

hyper = { "cmd", "alt", "ctrl" }
shift_hyper = { "cmd", "alt", "ctrl", "shift" }

col = hs.drawing.color.x11
swisscom_logo = hs.image.imageFromPath(hs.configdir .. "/files/swisscom_logo_2x.png")

hs.loadSpoon("SpoonInstall")

spoon.SpoonInstall.repos.zzspoons = {
    url = "https://github.com/zzamboni/zzSpoons",
    desc = "zzamboni's spoon repository",
}

spoon.SpoonInstall.use_syncinstall = true


Install = spoon.SpoonInstall

Install:andUse("ClipboardTool",
        {
            hotkeys = {
                toggle_clipboard = { hyper, "v" } },
            start   = true,
        }
)


local wm = hs.webview.windowMasks

Install:andUse("MultiTranslate",
        {
            disable = false,
            config = {
                popup_style = wm.utility | wm.HUD | wm.titled | wm.closable | wm.resizable,
            },
            hotkeys = {
                text = { hyper, "s" },
                YouDao = { hyper, "f" },
                BaiDu = { hyper, "d" },
                translate_to_zh = { hyper, "a" },
                ocr = { hyper, "r" },
                chuan = { hyper, "l" },
                chuan = { hyper, "l" },
                youdaotoggle = {shift_hyper, "f"},
                ggtoggle = {shift_hyper, "a"},
                --translate_to_de = { hyper, "d" },
                --translate_to_es = { hyper, "s" },
                --translate_de_en = { shift_hyper, "e" },
                --translate_en_de = { shift_hyper, "d" },
            }
        }
)


-- Speech Syntheziser  todo 中英分开后分别朗读
--local en_speech = hs.speech.new("samantha.premium"):rate(220)
local en_speech = hs.speech.new("tom.premium"):rate(220)
local zn_speech = hs.speech.new("mei-jia.premium"):rate(300)
local utf_8 = utf8.codes("utf8")
hs.hotkey.bind(hyper, "e", function ()
    if zn_speech:speaking() then zn_speech:stop("sentence") end
    if en_speech:speaking() then en_speech:stop("sentence") end

    if not hs.speech.isAnyApplicationSpeaking() then
        local text = current_selection()
        if utf_8(text, 1)  == 4 or utf8.len(text) <string.len(text)/2 then
            zn_speech:speak(text)
        else
            en_speech:speak(text)
        end
    end
end)

--dofile("./anytranslate/anytranslate.lua")

--Install:andUse("TimeLine", { colors = { ["U.S."] = {col.green, col.white, col.red}, ["搜狗拼音"] = {col.black, col.red, col.yellow}, }, start = true })


local localstuff = loadfile(hs.configdir .. "/init-local.lua")
if localstuff then localstuff() end

Install:andUse("FadeLogo",
        {
            config = {
                default_run = 1.0,
            },
            start = true
        }
)

-- Ensure the IPC command line client is available
hs.ipc.cliInstall()

--screensChangedCallback()

--hs.tabs.enableForApp(hs.application'chrome')
--hs.tabs.enableForApp(hs.application'idea')

--TODO 原编号
hs.hints.showTitleThresh = 30
hs.hints.titleMaxSize = 10
hs.hints.style = "vimperator" -- TODO 中文没有
hs.hotkey.bind(hyper, 'w', function()
    hs.hints.windowHints()
end)


--require("appMenu")
--require("weather")

--===    时间表模式   ===
function timeReminder()
    -- keyUpDown({ 'alt', 'shift' }, 'C')
    -- keyUpDown({ 'alt' }, 'C')
    keyUpDown({ 'fn' }, '3')
    keyUpDown({ 'fn' }, '2')
    hs.alert("不跑偏 抓重点¡!")
    hs.timer.doAfter(1 * 30 * 60, timeReminder)
end
--hs.timer.doAfter(1 * 30 * 60, timeReminder)

--hs.eventtap.keyStroke({"fn"}, "z")  -- 默认启动时间轴模式

--Install:andUse("TimeFlow")

return hs

-- grep "MYHSFIX" -A20  ~/.hammerspoon/Spoons/MultiTranslate.spoon/init.lua
